
            tests:
              - unique
              - not_null


//-------------------------------------------------//


dbt run --select "config.materialized:incremental"


//-----------------------------------------------------------//


dbt run-operation generate_source --args '{"schema_name": "sql_server_dbo", "database_name": "<ALUMNO>_DEV_BRONZE_DB", "generate_columns": "true", "include_descriptions": "true"}'


//--------------------------------------------------------------//


{% set event_types = ["checkout", "package_shipped", "add_to_cart","page_view"] %}
WITH stg_events AS (
    SELECT * 
    FROM {{ ref('stg_sql_server_dbo_events') }}
    ),

renamed_casted AS (
    SELECT
        user_id,
        {%- for event_type in event_types   %}
        sum(case when event_type = '{{event_type}}' then 1 end) as {{event_type}}_amount
        {%- if not loop.last %},{% endif -%}
        {% endfor %}
    FROM stg_events
    GROUP BY 1
    )

SELECT * FROM renamed_casted



//---------------------------------------------------//



{% macro obtener_valores(table, column) %}
  --Preparamos la query
  {% set query_sql %}
    SELECT DISTINCT {{column}} FROM {{table}}
    {% endset %}
    --Ejecutamos la query    
    {% set results = run_query(query_sql) %}
    --En caso de que se ejecute
    {% if execute %}
    --Devolvemos los valores de la primera columna
        {% set results_list = results.columns[0].values() %}
    {% else %}
        {% set results_list = [] %}
    {% endif %}

{{ return(results_list) }}
{% endmacro %}




//-------------------------------------------------------------------//



{% set event_types = obtener_tipo_eventos() %}
WITH stg_events AS (
    SELECT * 
    FROM {{ ref('stg_sql_server_dbo_events') }}
    ),

renamed_casted AS (
    SELECT
        user_id,
        {%- for event_type in event_types   %}
        sum(case when event_type = '{{event_type}}' then 1 end) as {{event_type}}_amount
        {%- if not loop.last %},{% endif -%}
        {% endfor %}
    FROM stg_events
    GROUP BY 1
    )

SELECT * FROM renamed_casted


//--------------------------------------------------------------------------//


{{ dbt_utils.generate_surrogate_key(['field_a', 'field_b'[,...]]) }}


//----------------------------------------------------------------------------//


{{ config(
    materialized='incremental'
    ) 
    }}


WITH stg_budget_products AS (
    SELECT * 
    FROM {{ source('google_sheets','budget') }}
{% if is_incremental() %}

	  where _fivetran_synced > (select max(_fivetran_synced) from {{ this }})

{% endif %}
    ),

renamed_casted AS (
    SELECT
          _row
        , month
        , quantity 
        , _fivetran_synced
    FROM stg_budget_products
    )

SELECT * FROM renamed_casted


//---------------------------------------------------------//


{{ config(
  materialized='table',
  unique_key='promo_id_subrogada',
  relationships={
    'promo_id_subrogada': 'promos.promo_id'
  }
) }}

with fuente as (
    select * from {{ source('sql_server_dbo', 'promos') }}
),

stg_promos as (
    select
        promo_id as promo_id,
        discount,
        status as status,
        MD5(CAST(promo_id AS STRING) || CAST(discount AS STRING) || COALESCE(status, '')) AS promo_id_subrogated,
        _fivetran_synced as date_load
    from fuente
)

select 
    promo_type,
    discount,
    promo_status,
    promo_id_subrogated
from stg_promos
group by 1, 2, 3, 4
having count(*) = 1



//-----------------------------------------------------------------//


{{
  config(
    materialized='table'
  )
}}

with 

source as (

    select * from {{ source('sql_server_dbo', 'promos') }}

),

renamed as (

    select
        promo_id,
        discount,
        status,
        _fivetran_deleted
        _fivetran_synced

    from source

)

select * from renamed


//----------------------------------------------------------//

{% snapshot budget_snapshot %}

{{
    config(
      target_schema='snapshots',
      unique_key='_row',
      strategy='timestamp',
      updated_at='_fivetran_synced',

      /*check_cols=['quantity'],

      invalidate_hard_deletes=True,*/
    )
}}

select * from {{ source('google_sheets', 'budget') }}

{% endsnapshot %}


//----------------------------------------------------------------------//



# Name your project! Project names should contain only lowercase characters
# and underscores. A good package name should reflect your organization's
# name or the intended use of these models
name: 'my_new_project'
version: '1.0.0'
config-version: 2

# This setting configures which "profile" dbt uses for this project.
profile: 'default'

# These configurations specify where dbt should look for different types of files.
# The `model-paths` config, for example, states that models in this project can be
# found in the "models/" directory. You probably won't need to change these!
model-paths: ["models"]
analysis-paths: ["analyses"]
test-paths: ["tests"]
seed-paths: ["seeds"]
macro-paths: ["macros"]
snapshot-paths: ["snapshots"]

target-path: "target"  # directory which will store compiled SQL files
clean-targets:         # directories to be removed by `dbt clean`
  - "target"
  - "dbt_packages"


# Configuring models
# Full documentation: https://docs.getdbt.com/docs/configuring-models

# In dbt, the default materialization for a model is a view. This means, when you run 
# dbt run or dbt build, all of your models will be built as a view in your data platform. 
# The configuration below will override this setting for models in the example folder to 
# instead be materialized as tables. Any models you add to the root of the models folder will 
# continue to be built as views. These settings can be overridden in the individual model files
# using the `{{ config(...) }}` macro.

models:
  my_new_project:
    # Applies to all files under models/example/
    example:
      +materialized: view
